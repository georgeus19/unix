diff --git a/src/actions.cpp b/src/actions.cpp
--- a/src/actions.cpp
+++ b/src/actions.cpp
-#define ENVELOPE_SYMKEY "symkey"
-int action_gen_symkey (const std::string&algspec,
-                       const std::string&symmetric, bool armor)
+static int action_gen_symkey (const std::string&algspec,
+                              const std::string&symmetric,
+                              const std::string&withlock,
+                              bool armor, bool force_lock)
-	sencode*SK = sk.serialize();
-	std::string data = SK->encode();
-	sencode_destroy (SK);
-
-	std::ofstream sk_out;
-	sk_out.open (symmetric == "-" ? "/dev/stdout" : symmetric.c_str(),
-	             std::ios::out | std::ios::binary);
-	if (!sk_out) {
-		err ("error: can't open symkey file for writing");
-		return 1;
-	}
-
-	if (armor) {
-		std::vector<std::string> parts;
-		parts.resize (1);
-		base64_encode (data, parts[0]);
-		data = envelope_format (ENVELOPE_SYMKEY, parts, r);
-	}
-
-	sk_out << data;
-	if (!sk_out.good()) {
-		err ("error: can't write to symkey file");
-		return 1;
-	}
-
-	sk_out.close();
-	if (!sk_out.good()) {
-		err ("error: couldn't close symkey file");
-		return 1;
-	}
+	if (!sk.save (symmetric, "", armor, force_lock, r)) return 1;
-algspectable_t& algspectable()
+static algspectable_t& algspectable()
+		table["SYM"] = "CHACHA20,CUBE512";
-		table["SYM"] = "CHACHA20,SHA256";
-		table["SYM"] = "CHACHA20,CUBE512";
-                    const std::string&symmetric, bool armor,
+                    const std::string&symmetric, const std::string&withlock,
+                    bool armor, bool force_lock,
-		return action_gen_symkey (algspec, symmetric, armor);
+		return action_gen_symkey (algspec, symmetric, withlock,
+		                          armor, force_lock);
-	if (!KR.store_keypair (keyring::get_keyid (pub),
-	                       name, algname, pub, priv)) {
+	keyring::keypair_entry*
+	kp = KR.store_keypair (keyring::get_keyid (pub),
+	                       name, algname, pub, priv);
+	if (!kp) {
-	if (!KR.save()) {
+	if (force_lock && !kp->lock (withlock)) {
+		err ("error: locking the key failed");
+		return 1;
+	}
+
+	if (!KR.save (r)) {
-int action_sym_encrypt (const std::string&symmetric, bool armor)
+static int action_sym_encrypt (const std::string&symmetric,
+                               const std::string&withlock, bool armor)
-	//read the symmetric key first
-	std::ifstream sk_in;
-	sk_in.open (symmetric == "-" ? "/dev/stdin" : symmetric.c_str(),
-	            std::ios::in | std::ios::binary);
-
-	if (!sk_in) {
-		err ("error: can't open symkey file");
-		return 1;
-	}
-
-	std::string sk_data;
-	if (!read_all_input (sk_data, sk_in)) {
-		err ("error: can't read symkey");
-		return 1;
-	}
-	sk_in.close();
-
-	if (armor) {
-		std::vector<std::string> parts;
-		std::string type;
-		if (!envelope_read (sk_data, 0, type, parts)) {
-			err ("error: no data envelope found");
-			return 1;
-		}
-
-		if (type != ENVELOPE_SYMKEY || parts.size() != 1) {
-			err ("error: wrong envelope format");
-			return 1;
-		}
-
-		if (!base64_decode (parts[0], sk_data)) {
-			err ("error: malformed data");
-			return 1;
-		}
-	}
-
-	sencode*SK = sencode_decode (sk_data);
-	if (!SK) {
-		err ("error: could not parse input sencode");
-		return 1;
-	}
-
-	if (!sk.unserialize (SK)) {
-		err ("error: could not parse input structure");
-		return 1;
-	}
-
-	sencode_destroy (SK);
+	if (!sk.load (symmetric, withlock, true, armor)) return 1;
+                    const std::string&withlock,
-		return action_sym_encrypt (symmetric, armor);
+		return action_sym_encrypt (symmetric, withlock, armor);
-int action_sym_decrypt (const std::string&symmetric, bool armor)
+static int action_sym_decrypt (const std::string&symmetric,
+                               const std::string&withlock, bool armor)
-	std::ifstream sk_in;
-	sk_in.open (symmetric == "-" ? "/dev/stdin" : symmetric.c_str(),
-	            std::ios::in | std::ios::binary);
-
-	if (!sk_in) {
-		err ("error: can't open symkey file");
-		return 1;
-	}
-
-	std::string sk_data;
-	if (!read_all_input (sk_data, sk_in)) {
-		err ("error: can't read symkey");
-		return 1;
-	}
-	sk_in.close();
-
-	if (armor) {
-		std::vector<std::string> parts;
-		std::string type;
-		if (!envelope_read (sk_data, 0, type, parts)) {
-			err ("error: no data envelope found");
-			return 1;
-		}
-
-		if (type != ENVELOPE_SYMKEY || parts.size() != 1) {
-			err ("error: wrong envelope format");
-			return 1;
-		}
-
-		if (!base64_decode (parts[0], sk_data)) {
-			err ("error: malformed data");
-			return 1;
-		}
-	}
-
-	sencode*SK = sencode_decode (sk_data);
-	if (!SK) {
-		err ("error: could not parse input sencode");
-		return 1;
-	}
-
-	if (!sk.unserialize (SK)) {
-		err ("error: could not parse input structure");
-		return 1;
-	}
-
-	sencode_destroy (SK);
+	if (!sk.load (symmetric, withlock, false, armor)) return 1;
+                    const std::string&withlock,
-		return action_sym_decrypt (symmetric, armor);
+		return action_sym_decrypt (symmetric, withlock, armor);
+	if (!kpe->decode_privkey (withlock)) {
+		err ("error: could not decrypt required private key");
+		return 1;
+	}
+
-int action_hash_sign (bool armor, const std::string&symmetric)
+static int action_hash_sign (bool armor, const std::string&symmetric)
+                 const std::string&withlock,
+	//decode it for message.h
+	if (!u->decode_privkey (withlock)) {
+		err ("error: could not decrypt required private key");
+		return 1;
+	}
+
-int action_hash_verify (bool armor, const std::string&symmetric)
+static int action_hash_verify (bool armor, const std::string&symmetric)
+                   const std::string&withlock,
+                         const std::string&withlock,
+	//decode the signing key for message.h
+	if (!u->decode_privkey (withlock)) {
+		err ("error: could not decrypt required private key");
+		return 1;
+	}
+
+                           const std::string&withlock,
+	if (!kpe->decode_privkey (withlock)) {
+		err ("error: could not decrypt required private key");
+		return 1;
+	}
+
-		     << '@' << keyid.substr (0, 22) << "...\t"
+		     << '@' << keyid.substr (0, 10) << "...\t"
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
-			                  i->second.pub.key, i->second.privkey);
+			                  i->second.pub.key, i->second.privkey_raw);
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
-	sencode*S = keyring::serialize_keypairs (s);
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	sencode*S = keyring::serialize_keypairs (s, r);
-		ccr_rng r;
-		if (!r.seed (256)) SEED_FAILED;
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
-	if (!KR.save()) {
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
+		err ("error: couldn't save keyring");
+		return 1;
+	}
+	return 0;
+}
+
+/*
+ * locking/unlocking
+ */
+
+static int action_lock_symkey (const std::string&symmetric,
+                               const std::string&withlock,
+                               bool armor)
+{
+	symkey sk;
+	if (!sk.load (symmetric, "", true, armor)) return 1;
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!sk.save (symmetric, withlock, armor, true, r)) return 1;
+	return 0;
+}
+
+int action_lock_sec (bool yes,
+                     const std::string&filter,
+                     const std::string&symmetric,
+                     const std::string&withlock,
+                     bool armor,
+                     keyring&KR)
+{
+	if (!symmetric.empty())
+		return action_lock_symkey (symmetric, withlock, armor);
+
+	PREPARE_KEYRING;
+
+	int kc = 0;
+	for (keyring::keypair_storage::iterator
+	     i = KR.pairs.begin(), e = KR.pairs.end();
+	     i != e; ++i) {
+		if (keyspec_matches (filter, i->second.pub.name, i->first))
+			++kc;
+	}
+	if (!kc) {
+		err ("error: no such key");
+		return 0;
+	}
+	if (!yes) {
+		bool okay = false;
+		ask_for_yes (okay, "This will protect " << kc
+		             << " secrets from your keyring. Continue?");
+		if (!okay) return 0;
+	}
+
+	for (keyring::keypair_storage::iterator
+	     i = KR.pairs.begin(), e = KR.pairs.end();
+	     i != e; ++i) {
+		if (keyspec_matches (filter, i->second.pub.name, i->first))
+			if (!i->second.lock (withlock)) {
+				err ("error: key locking failed");
+				return false;
+			}
+	}
+
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
+		err ("error: couldn't save keyring");
+		return 1;
+	}
+	return 0;
+}
+
+static int action_unlock_symkey (const std::string&symmetric,
+                                 const std::string&withlock,
+                                 bool armor)
+{
+	symkey sk;
+	if (!sk.load (symmetric, withlock, false, armor)) return 1;
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!sk.save (symmetric, "", armor, false, r)) return 1;
+	return 0;
+}
+
+int action_unlock_sec (bool yes,
+                       const std::string&filter,
+                       const std::string&symmetric,
+                       const std::string&withlock,
+                       bool armor,
+                       keyring&KR)
+{
+	if (!symmetric.empty())
+		return action_unlock_symkey (symmetric, withlock, armor);
+
+	PREPARE_KEYRING;
+
+	int kc = 0;
+	for (keyring::keypair_storage::iterator
+	     i = KR.pairs.begin(), e = KR.pairs.end();
+	     i != e; ++i) {
+		if (keyspec_matches (filter, i->second.pub.name, i->first))
+			++kc;
+	}
+	if (!kc) {
+		err ("error: no such key");
+		return 0;
+	}
+	if (!yes) {
+		bool okay = false;
+		ask_for_yes (okay, "This will remove protection from " << kc
+		             << " secrets from your keyring. Continue?");
+		if (!okay) return 0;
+	}
+
+	for (keyring::keypair_storage::iterator
+	     i = KR.pairs.begin(), e = KR.pairs.end();
+	     i != e; ++i) {
+		if (keyspec_matches (filter, i->second.pub.name, i->first))
+			if (!i->second.unlock (withlock)) {
+				err ("error: key unlocking failed");
+				return false;
+			}
+	}
+
+	ccr_rng r;
+	if (!r.seed (256)) SEED_FAILED;
+	if (!KR.save (r)) {
