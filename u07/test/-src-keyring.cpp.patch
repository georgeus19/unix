diff --git a/src/keyring.cpp b/src/keyring.cpp
--- a/src/keyring.cpp
+++ b/src/keyring.cpp
-		sencode_destroy (i->second.privkey);
+		if (i->second.privkey)
+			sencode_destroy (i->second.privkey);
-		sencode *priv, *pub;
-
-		priv = sencode_decode (privkey->b);
-		if (!priv) goto failure;
+		sencode *pub;
-		if (!pub) {
-			sencode_destroy (priv);
-			goto failure;
-		}
+		if (!pub) goto failure;
-		                              pub, priv);
+		                              pub, privkey->b);
-sencode* keyring::serialize_keypairs (const keypair_storage&pairs)
+sencode* keyring::serialize_keypairs (keypair_storage&pairs, prng&rng)
+	for (std::map<std::string, keypair_entry>::iterator
+	     i = pairs.begin(), e = pairs.end(); i != e; ++i)
+		if (!i->second.fix_dirty (rng)) return NULL;
+
-		a->items[2] = new sencode_bytes (i->second.privkey->encode());
+		a->items[2] = new sencode_bytes (i->second.privkey_raw);
+#include "privfile.h"
+#include <fstream>
-#include <fstream>
-
-	struct stat st;
-	if (stat (fn.c_str(), &st)) {
-		if (errno != ENOENT)
-			return false;
-
-		//if it simply doesn't exist, create it
-		sencode_list l;
-		sencode_bytes b (ident);
-		l.items.push_back (&b);
-		std::string emptyfile = l.encode();
-
-		int fd;
-		fd = creat (fn.c_str(), S_IRUSR | S_IWUSR);
-		if (fd < 0) return false;
-		ssize_t res = write (fd, emptyfile.c_str(),
-		                     emptyfile.length());
-		if (close (fd)) return false;
-		if ( (size_t) res != emptyfile.length()) return false;
+	sencode_list l;
+	sencode_bytes b (ident);
+	l.items.push_back (&b);
+	std::string emptyfile = l.encode();
-	} else {
-		if (!S_ISREG (st.st_mode))
-			return false;
-	}
-
-	if (access (fn.c_str(), R_OK | W_OK)) return false;
-
-	return true;
+	return put_private_file (fn, emptyfile, true);
-bool keyring::save()
+bool keyring::save (prng&rng)
-	S = serialize_keypairs (pairs);
+	S = serialize_keypairs (pairs, rng);
+	if (!S) return false;
+
+
+/*
+ * keypair_entry loads the privkeys lazily so that it's not necessary to have
+ * all the secrets all the time
+ */
+
+#include "seclock.h"
+#include "iohelpers.h"
+
+bool keyring::keypair_entry::lock (const std::string&withlock)
+{
+	//withlock here is useful for just re-encrypting,
+	//possibly with different password
+	if (!decode_privkey (withlock)) return false;
+	err ("notice: locking key @" + pub.keyid);
+	if (!load_lock_secret (sk, withlock,
+	                       "protecting key `"
+	                       + escape_output (pub.name)
+	                       + "'",
+	                       "KEYRING", true))
+		return false;
+
+	dirty = true;
+	locked = true;
+	return true;
+}
+
+bool keyring::keypair_entry::unlock (const std::string&withlock)
+{
+	if (!decode_privkey (withlock)) return false;
+	if (locked) {
+		locked = false;
+		dirty = true;
+	}
+	return true;
+}
+
+bool keyring::keypair_entry::decode_privkey (const std::string&withlock)
+{
+	if (privkey) return true; //already done
+	std::string encoded;
+	if (looks_like_locked_secret (privkey_raw)) {
+		err ("notice: unlocking key @" + pub.keyid);
+		if (!unlock_secret_sk (privkey_raw, encoded,
+		                       withlock,
+		                       "loading key `"
+		                       + escape_output (pub.name)
+		                       + "'",
+		                       "KEYRING", sk))
+			return false;
+		locked = true;
+	} else {
+		encoded = privkey_raw;
+		locked = false;
+	}
+
+	privkey = sencode_decode (encoded);
+	if (!privkey)
+		return false;
+
+	dirty = false;
+	return true;
+}
+
+#include <sstream>
+
+bool keyring::keypair_entry::fix_dirty (prng&rng)
+{
+	if (!privkey || !dirty) return true; //nothing to do!
+	if (locked) {
+		std::string encoded = privkey->encode();
+		if (!lock_secret_sk (encoded, privkey_raw, sk, rng))
+			return false;
+	} else {
+		privkey_raw = privkey->encode();
+	}
+	dirty = false;
+	return true;
+}
