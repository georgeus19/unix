--- a/man/ccr.1
+++ b/man/ccr.1
-.TH CCR 1 2016-01-12 "ccr" "Codecrypt"
+.TH CCR 1 2017-10-23 "ccr" "Codecrypt"
-Where expecting input or output of data in codecrypt communication format, use
+Where expecting input or output of data in Codecrypt communication format, use
-Specify a private key to use for signing the message.
+Specify a private key to use for signing the message. If this option is empty,
+it is defaulted from CCR_USER environment variable.
+.TP
+\fB\-w\fR, \fB\-\-with-lock\fR <\fIfile\fR>
+When loading the secret part of the keyring, decrypt the file using the
+specified shared key. If that file looks encrypted and \fB-w\fR is not
+specified, asking for the password interactively (i.e. "-w @") will be assumed.
+
+.SH PASSWORD-DERIVED SYMMETRIC KEYS AND PASSWORD-PROTECTED SECRETS
+
+Symmetric keys can be specified using a filename, or expanded from a password
+(which is convenient e.g. for protecting private keys): If the filename for
+\fB-S\fR starts with "@", program will first check the rest of the filename to
+find a symmetric cipher algorithm specification, as in \fB-g\fR. If nothing is
+specified, it will check CCR_SYMMETRIC_ALGORITHM environment variable, and if
+that is still unspecified, it will default to "SYM,SHORTBLOCK". The reason for
+defaulting the short blocks is that the functionality focuses on tiny keys.
+
+After the symmetric algorithm is chosen, program will try to get the password
+from environment variable CCR_SYMMETRIC_PASSWORD. If that variable is not set,
+it will ask the user for the password interactively.
+
+The password will be expanded to internally form a symmetric key for the
+specified algorithm, which will in turn be used for the requested action.
+
+Symmetric and private keys may be encrypted by a password or a symmetric key.
+Parameter \fB-w\fR accepts the same arguments as \fB-S\fR, with the exception
+that the resulting loaded or internally generated symmetric key will be used to
+encrypt or decrypt symmetric and private keys when required:
+
+Actions \fB-L\fR and \fB-U\fR can be used to lock, resp. unlock private keys
+(specific keys to be modified can be selected using \fB--filter\fR) or
+symmetric keys (if used together with \fB-S\fR). Action \fB-g\fR can be
+modified by \fB-L\fR in the same way.
+
+The environment variables used for automatically-specifying the password in
+this case are separate from the previous ones: CCR_KEYRING_PASSWORD and
+CCR_KEYRING_ALGORITHM for locking/unlocking private keys, respectively
+CCR_SYMKEY_PASSWORD and CCR_SYMKEY_ALGORITHM for specifying symmetric key used
+to unlock other symmetric keys (even the ones that are themselves used for
+locking other keys).
+
+.SS On-line use and side channels
+
+Codecrypt does not do much to prevent attacks that rely on side channels that
+are common on the internet. IF YOU DESPERATELY NEED TO PUT CODECRYPT TO E.G.
+AN ON-LINE SERVICE, MAKE SURE THAT ANY POTENTIAL ATTACKER CAN NOT ACCESS THE SIDE
+CHANNELS: Never execute Codecrypt directly from the server software. Sanitize
+BOTH the input and output of Codecrypt. Make any way to gather usable
+statistics about the running time of Codecrypt impossible. Make it hard for
+anyone to collect side-channel information, and, in particular, ensure that
+your application does not allow to repeatedly run Codecrypt in a way that makes
+it fail on invalid or damaged outputs, or produces any statistical
+information about timings and failures of the runs.
+
-algebraic variant of quasi-dyadic McEliece that is still in codecrypt (MCEQD*
-algorithms, kept for compatibility purposes) has been broken by an algebraic
-attack. Security is greatly reduced. Use the QC-MDPC variant which dodges
-similar attacks.
+algebraic variant of quasi-dyadic McEliece that was in Codecrypt has been
+broken by an algebraic attack. Security was greatly reduced. Use the QC-MDPC
+variant which dodges similar attacks.
+.SH Password-derived symmetric keys
+
+Passwords are weak and, if times did not change and humanoids are still
+humanoids, you are prone to $5 wrench attacks.
+
+Combination of \fB-L\fR and \fB-S\fR options can be exploited to output a
+password-expanded key to a file. Doing that for any real purpose is a bad idea.
+
+
+#password-protect all your private keys
+ccr -L
+
+#protect a symmetric key using another symmetric key
+ccr -L -S symkey1 -w symkey2
+
+#password-protect symkey2 with a custom cipher
+ccr -L -S symkey2 -w @xsynd,cube512
-Used cryptography is relatively new. For this reason, codecrypt eats data. Use
+Used cryptography is relatively new. For this reason, Codecrypt eats data. Use
