diff --git a/src/main.cpp b/src/main.cpp
--- a/src/main.cpp
+++ b/src/main.cpp
-	out (" -R, --in      input file, default is stdin");
-	out (" -o, --out     output file, default is stdout");
+	out (" -R, --in      set input file, default is stdin");
+	out (" -o, --out     set output file, default is stdout");
+	out (" -L, --lock           lock secrets");
+	out (" -U, --unlock         unlock secrets");
-	out (" -n, --no-action    on import, only show what would be imported");
-	out (" -N, --name         specify a new name for renaming or importing");
+	out (" -N, --name         specify a new name for renaming or importing");
+	out (" -n, --no-action    on import, only show what would be imported");
+	out (" -w, --with-lock    specify the symmetric key for (un)locking the secrets");
+	out (" -w @SPEC           ask for password and expand it to a symmetric key");
+	out("                     of type SPEC for (un)locking the secret");
+	outeol;
+	out (" With -S and -w, using `@' as the key file name will cause the program to");
+	out (" interactively ask for a password and derive the symmetric key from it.");
+#include <stdlib.h>
+	    withlock,
+			{"lock",	0,	0,	'L' },
+			{"unlock",	0,	0,	'U' },
+
+			{"with-lock",	1,	0,	'w' },
+
-		     "hVTayr:u:R:o:E:kipx:m:KIPX:M:g:N:F:fnsvedCb:S:",
+		     "hVTayr:u:R:o:E:kipx:m:KIPX:M:LUg:N:F:fnw:svedCb:S:",
-			read_action ('g')
+			read_action ('U')
-			                 "please specify single name")
+			                 "specify a single name")
-			                 "please specify single filter string")
+			                 "specify a single filter string")
+			read_single_opt ('w', withlock,
+			                 "specify a single key lock")
+
-			 * 'E' = "big encrypt with sig" and 'D' "big decrypt
-			 * with verify".
+			 * 'E' = "big encrypt with sig", 'D' "big decrypt
+			 * with verify" and 'G' = "generate and lock"
-			read_action_comb ('v', 'd', 'D')
+			read_action_comb ('v', 'd', 'D')
+			read_action_comb ('g', 'L', 'G')
+			read_action_comb ('L', 'g', 'G')
+
+	//default local user key from environment
+	if(user.empty()) {
+		const char*u=getenv("CCR_USER");
+		if(u) user=u;
+	}
+		
-		case 'd':
-		case 'g':
+		case 'd':
+		case 'g':
+		case 'G':
+		case 'L':
+		case 'U':
-			progerr ("specified action doesn't support symmetric operation");
+			progerr ("specified action doesn't support"
+			         " symmetric operation");
-		                          symmetric, opt_armor,
+		                          symmetric, withlock,
+		                          opt_armor, false,
+		                          KR, AS);
+		break;
+
+	case 'G':
+		exitval = action_gen_key (action_param, name,
+		                          symmetric, withlock,
+		                          opt_armor, true,
-		                          KR, AS);
+		                          withlock, KR, AS);
-		exitval = action_decrypt (opt_armor, symmetric, KR, AS);
+		exitval = action_decrypt (opt_armor, symmetric, withlock,
+		                          KR, AS);
-		                       opt_clearsign, symmetric, KR, AS);
+		                       opt_clearsign, symmetric, withlock, KR, AS);
-		                         opt_yes, symmetric, KR, AS);
+		                         opt_yes, symmetric, withlock, KR, AS);
-		exitval = action_sign_encrypt (user, recipient, opt_armor,
-		                               KR, AS);
+		exitval = action_sign_encrypt (user, recipient, withlock,
+		                               opt_armor, KR, AS);
-		exitval = action_decrypt_verify (opt_armor, opt_yes,
+		exitval = action_decrypt_verify (opt_armor, opt_yes, withlock,
+	case 'L':
+		exitval = action_lock_sec (opt_yes, filter,
+		                           symmetric, withlock,
+		                           opt_armor, KR);
+		break;
+
+	case 'U':
+		exitval = action_unlock_sec (opt_yes, filter,
+		                             symmetric, withlock,
+		                             opt_armor, KR);
+		break;
+
