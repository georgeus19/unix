--- a/README.md
+++ b/README.md
-- Cubehash variants where selected for implementation ease, really clean
-  design, quite good speed and flexibility of parameter choices. This is also
-  the only hash possibility when Crypto++ library is not linked to codecrypt.
-  KeyID's are CUBE256 hashes of serialized public key.
+- Cubehash variants were selected for implementation ease, really clean design,
+  quite good speed and flexibility of parameter choices. This is also the only
+  hash possibility when Crypto++ library is not linked to codecrypt.  KeyIDs
+  are CUBE256 hashes of corresponding serialized public keys.
+	#password-protect all your private keys
+	ccr -L
+
+	#protect a symmetric key using another symmetric key
+	ccr -L -S symkey1 -w symkey2
+
+	#password-protect symkey2 with a custom cipher
+	ccr -L -S symkey2 -w @xsynd,cube512
+
-	 -R, --in      input file, default is stdin
-	 -o, --out     output file, default is stdout
+	 -R, --in      set input file, default is stdin
+	 -o, --out     set output file, default is stdout
-	                    is done using symmetric cipher and signatures are
-	                    hashes, and specify a filename of symmetric key or hashes
+			    is done using symmetric cipher and signatures are
+			    hashes, and specify a filename of symmetric key or hashes
-	 -k, --list           list contents of keyring
+	 -k, --list           list the contents of keyring
+	 -L, --lock           lock secrets
+	 -U, --unlock         unlock secrets
-	 -n, --no-action    on import, only show what would be imported
-	 -N, --name         specify a new name for renaming or importing
+	 -N, --name         specify a new name for renaming or importing
+	 -n, --no-action    on import, only show what would be imported
+	 -w, --with-lock    specify the symmetric key for (un)locking the secrets
+	 -w @SPEC           ask for password and expand it to a symmetric key
+	                    of type SPEC for (un)locking the secret
